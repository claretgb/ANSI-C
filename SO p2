#include <unistd.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include "datos.h"

//int usleep(µs);
int veces = 0;     /* variable global */
void padre(int);   /* funciones manejadoras */
void hijo(int);

void main()
{
	pid_t creado, ppid;
	signal(SIGUSR1, padre);      /* pone SIGUSR1*/
	signal(SIGUSR2, padre);      /* pone SIGUSR2*/

	switch(creado = fork())
	{
	case -1:
		perror("fallo en el fork");
		exit(1);
	case 0:     /* el hijo */
		signal(SIGUSR1, hijo);
		ppid = getppid();
		for(;;)
		{
			sleep(1); /* el otro hace el pause */
			/* envio signal al proceso padre */
			kill(ppid, SIGUSR1);
			pause();	   /* espero la respuesta */
		}
	default :    /* el padre */
		for(int i = 0; i < N; i++)
		{
			FILE *fp;
			char name[12];
			sprintf(name, "F%d.txt", i);
			fp = fopen(name, "w");
			fclose(fp);
		}
		pause();   /* espero a que me llamen */
		sleep(1); /* el hijo hace pause */
		kill(creado, SIGUSR1); /* aviso al hijo */
	}
}

/* funcion de manejo de la signal para el padre */
void padre (int senal)
{
	if(senal == SIGUSR1)
	{
		fclose(fp);
	}
	else if(senal == SIGUSR2)
	{
		fp = fopen(???);
	}
	/* de nuevo para recibir la siguiente signal */
	signal(senal, padre);	/* pone SIGUSR1 para el padre */
}

/* funcion de manejo de la signal para el hijo */
void hijo (int senal)
{
	/* ambos procesos tienen una copia de veces */
	printf("El hijo cogio la signal numero %d\n", ++veces);
	/* de nuevo para recibir la siguiente signal */
	signal(senal, hijo);	/* pone SIGUSR1 para el hijo */
}

/*función que lleva la cuenta del fichero que se va a abrir*/
int sumaUno ()
{
	
}
